---
- name: Determine OS release
  raw: 'cat /etc/*os-release'
  register: os
  when:
    - bootstrap_python_auto_fallback
  changed_when: false
  failed_when: false

# No, non-trivial way to install python3 on older systems, so fallback.
- name: Select older python for older OSen
  set_fact:
    bootstrap_python_version: 'python'
  when:
    - bootstrap_python_auto_fallback
    - (os | d('')) is regex('CentOS [^ ]+ 6|Debian [^ ]+ 8|Ubuntu 14')

- name: Bootstrap Install Python
  raw: |
    command -v {{ bootstrap_python_version }}  \
    || (test $? -eq 42 && exit 42 \
                       || command -v apt-get && apt-get -y update \
                                             && DEBIAN_FRONTEND=noninteractive apt-get install -y {{ bootstrap_python_version }}-minimal \
                                             && exit 42) \
    || (test $? -eq 42 && exit 42 \
                       || command -v yum     && yum -y update \
                                             && yum install -y {{ bootstrap_python_version }} \
                                             && exit 42) \
    || (test $? -eq 42 && exit 42 \
                       || command -v pkg     && pkg update \
                                             && pkg install -y {{ bootstrap_python_version }} \
                                             && exit 42) \
  # NOTE: Always escape traling newline with `\`
  # see: https://github.com/ansible/ansible/issues/68314
  register: py
  changed_when: py.rc == 42
  failed_when: py.rc >= 1 and py.rc != 42

- name: Gathering Facts (post python install)
  setup:
    gather_subset: "{{ bootstrap_gather_facts }}"
  when: ( bootstrap_gather_facts is defined
            and bootstrap_gather_facts
            and bootstrap_gather_facts | length > 0 )
